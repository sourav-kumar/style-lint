// -----------------------------------------------------------------------------
// When having several themes, this file contains everything related to the
// default one.
// -----------------------------------------------------------------------------

/* Styles */

@import "extra.css";
ul li {
    list-style: square;
    margin: 2em 20% 15px 0;
}
#content {
    -webkit-font-smoothing: antialiased;
    background: url(img/gradient.png);
    background: linear-gradient(to bottom, red, rgba(255, 0, 0, 0));
}

@media only screen and (min-width: 35em) {
    #content {
        width: 50%;
    }
}
.item + .item,
.item ~ .item {
    margin-left: -15px;
}
#buttons .lotsofcontent,
#buttons > *,
input[type=submit] {
    border-radius: .3rem;
}
a:hover,
a:focus {
    color: green;
}
blockquote::before,
blockquote::after {
    content: "\201d";
}


@import "compass/css3";


/**
 * fraction/grid
 *
 * Author:   Robert Piirainen
 * Twitter:  @robertpiira
 *
 * Github: https://github.com/robertpiira/fraction-grid
 *
 */


// SETTINGS
//------------------------------------------------------------------

$default-gutters: 2% !default;

// HELPERS
//------------------------------------------------------------------

@mixin border-box {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

@mixin stacks-horizontally {
  display: inline-block;
}

@mixin resets-context {
  letter-spacing: normal;
  vertical-align: top;
}

// BASE
//------------------------------------------------------------------

@mixin is-grid {
  letter-spacing: -0.31em;
}

@mixin is-grid-unit {
  @include resets-context;
  @include stacks-horizontally;
  @include border-box;
}

@mixin is-grid-field-unit {
  @include resets-context;
  @include border-box;
  display: block;
}

// PARTS
//------------------------------------------------------------------

// Define unit widths
@mixin has-width($target, $context) {
    width: calculate-widths($target, $context);
}

// Define unit gutters
@mixin has-gutters($gutters, $target: false, $context: false) {
  padding-left: calculate-gutters($gutters, $target, $context);
  padding-right: calculate-gutters($gutters, $target, $context);
}

// Define container offset gutters
@mixin has-offset-gutters($gutters, $target: false, $context: false) {
  margin-left: -#{calculate-gutters($gutters, $target, $context)};
  margin-right: -#{calculate-gutters($gutters, $target, $context)};
}

// GRID
//------------------------------------------------------------------

// Define grid container
@mixin grid($gutters: $default-gutters, $new-target: false, $new-context: false) {
  @include is-grid;
  @if ($gutters) {
    @include has-offset-gutters($gutters, $new-target, $new-context);
  } @else {
    border: 1px solid #aaa;
  }
}

// Define grid unit
@mixin grid-unit($target: false, $context: false, $gutters: $default-gutters, $new-target: false, $new-context: false) {
  @include is-grid-unit;
  @if ($target and $context) {
    @include has-width($target, $context);
  }
  @if ($gutters) {
    @include has-gutters($gutters, $new-target, $new-context);
  }
}

// Define grid field unit
@mixin grid-field-unit($gutters: $default-gutters, $new-target: false, $new-context: false) {
  @include is-grid-field-unit;
  @if ($gutters) {
    @include has-gutters($gutters, $new-target, $new-context);
  }
}

// FRACTION CALCULATORS
//------------------------------------------------------------------

// Calculate gutters
@function calculate-gutters($gutter, $numerator, $denominator) {
  @if ($numerator and $denominator) {
    @return ($denominator / $numerator) * $gutter;
  }
  @else {
    @return $gutter;
  }
}

// Calculate column widths
@function calculate-widths($numerator, $denominator) {
  @return percentage($numerator / $denominator);
}








// fraction-grid in use
//----------------------------------------------------

// Define new settigs
//----------------------------------------------------

$default-gutters: 1.2%;

// DEMO Basic
//----------------------------------------------------

.demo-basic {
  @include grid;
}

.demo-basic--unit {
  @include grid-unit(3, 4)
}

.demo-basic--unit-aside {
  @include grid-unit(1, 4)
}

// DEMO Nested
//----------------------------------------------------

.demo-responsive-nested {
  @include grid($default-gutters, 3, 4);
}

.demo-responsive-nested--unit {
  @include grid-unit(1, 3, $default-gutters, 3, 4);
  
  &:first-child {
     @include has-width(2, 3);
  }
}

// DEMO Responsive
//----------------------------------------------------

@media only screen and (min-width: 481px) {

  .demo-responsive {
    @include grid;
  }

  .demo-responsive--unit {
    @include grid-unit(1, 2);
  }

}

@media only screen and (min-width: 769px) {

  .demo-responsive--unit {
    @include grid-unit(1, 4);
  }

}

//----------------------------------------------------

















// Demo styles (no need to look here really)
//----------------------------------------------------

$base-bg: #1987B3;

* {margin: 0; padding: 0;}

a {color: $base-bg;}

ul {list-style: none;}

body {
  padding: 2em 0;
  font-family: sans-serif;
}

.demo-box.header-box {
  background: $base-bg;
}

.logo {
  font-size: 2.5em;
  text-align: center;
  letter-spacing: -.04em;
  span { 
      color: darken($base-bg, 30);
      margin: 0 -.1em 0 -.1em;
      position: relative;
      bottom: -.13em;
      font-size: 1.3em;
      display: inline-block;
      z-index: 1;
    }
}

.page {
  margin: 1em auto;
  width: 93%;
}

.footer {
  margin-top: .5em;
  padding-top: 1em;
  border-top: 1px dashed $base-bg;

  li {
    margin-right: .5em;
    display: inline;
  }
}

.demo-box {
  margin: 0 0 1em;
  background: $base-bg;
  height: 100px;
  border-radius: 4px;

  color: #fff;
  text-align: center;
  line-height: 100px;

  .demo-basic & {
    background: darken($base-bg, 10);
  }

  .demo-responsive-nested & {
    background: darken($base-bg, 20);
  }

}